# -*- coding: utf-8 -*-
"""RepBFSDFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1unS__-6lckizj0xcDjjkaVosbAENqzFe
"""



"""# **Dicinatory**
below is info about Dicitary name pakistan-cities.undirected graph
.Nodes = 10

"""

pakistan_cities = {
    'chitral': ['Dir'],
    'Dir': ['chitral', 'Sukkur'],
    'malakand': ['Dir', 'malakand', 'islamabad'],
    'peshawar': ['malakand', 'Lahore'],
    'islamabad': ['malakand'],
    'Lahore': ['peshawar', 'Islamabad'],
    'Islamabad': ['Lahore', 'Queeta'],
    'Queeta': ['Islamabad']
}

from collections import deque

def bfs_shortest_path(graph, start, goal):

    queue = deque([[start]])

    # Keep track of visited cities to avoid revisiting
    visited = set()

#Keep looping while there are paths left to explore.
    while queue:
        # Remove the first path from the queue (FIFO)
        path = queue.popleft()
        current_city = path[-1]  # Get the last node in the path, which is where you are now.

        # If the goal is reached, return this path immediately
        if current_city == goal:
            return path

        # If the current city has not been visited yet
        if current_city not in visited:
            visited.add(current_city)  # Mark it as visited

            # Loop through all neighboring cities
            #key = current_city → the city we are currently exploring.
            #default_value = [] → an empty list.
            #This is a for loop that iterates through every neighbor of the current_city.
            #Each loop step gives you one neighbor at a time.
            #If current_city = 'A', and 'A' is connected to 'B' and 'C':
            for neighbor in graph.get(current_city, []):
                # Create a new path with the neighbor added
                #Makes a safe copy of the current path so changes won’t affect the original one
                new_path = list(path)  # Copy the current path
                #Extends the copied path by adding the neighbor city to the end.
                new_path.append(neighbor)

                # Add the new path to the queue
                #Why needed?
              #Keeps BFS exploring paths in order, ensuring the shortest path is found.
                queue.append(new_path)

    # If we exhaust the queue and never find the goal
    #return None means no path exists, so the function stops and gives back 'nothing found' as the result."
    return None
#This function is like a map explorer that starts at one city
# and keeps going deeper step-by-step to find the goal, while remembering the path and visited cities.
def dfs_path(graph, start, goal, path=None, visited=None):

    # Initialize path and visited on the first call
    "path starts as an empty list to record the route you take."
    if path is None:
        path = []
        "visited starts as an empty set to remember visited places so you don't repeat them."
    if visited is None:
        visited = set()

    # Add current city to the path and mark as visited
    #Record the starting point in your route.
    path.append(start)
    #Mark it as visited to avoid cycles.
    visited.add(start)

    # If goal is reached, return the path
    if start == goal:
        return path

    # Explore each neighbor recursively
    #Gets all neighbors of the current node. Returns [] if no neighbors exist.
    for neighbor in graph.get(start, []):
        if neighbor not in visited:
# Make recursive DFS call
# graph The entire map of nodes and connections.
#neighbor       The next node to explore.
#goal   The final target node to reach.
#path.copy()    Safe copy of the current route.
#visited.copy() Safe copy of visited nodes to prevent loops.
#result = dfs_path(...) Go deeper into the graph and store the result.
            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())

            # If a path is found, return it immediately
            if result:
                return result

    # If no path found from this city, return None
    return None

# -------------------------------------------
# Step 4: Testing the functions
# -------------------------------------------
start_city = ""
goal_city = "Peshawar"


# BFS for the shortest path
bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from chitral to Peshawar:", bfs_result)
# DFS for any path
dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from chitral to Peshawar:", dfs_result)

